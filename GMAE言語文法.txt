以下にGAME86の文法を簡単に示します． 文法的には基本的に代入文しかありません．
システム変数に値を代入，読み出し することで入出力, 制御文の機能を実現します． 
演算には優先順位がありません．左から順に計算されます．
あと、プロンプトで"0"を入力すると、プログラム・リストの表示。
他には、対話モードで特殊なものは無い。

・実行の開始は、#=1 とやれば、プログラムの先頭へGOTOして、実行が始まる。
・&=0 とやれば、プログラム消去となる。
・>=$アドレス とやれば、アドレスの機械語サブルーチンをコールする。
・演算には優先順位が無く、左から順に計算される。

（システム変数）

=　プログラム先頭アドレス
&　プログラムエンドアドレス
*　プログラムメモリエンドアドレス


    <行番号>   1 〜 32767
    <10進定数> 0 〜 65535
    <16進定数> $0000 〜 $FFFF
    <文字定数> "文字"
    <変数名>   A 〜 Z または冗長形(ABC等 先頭1文字が有効)
    <1バイト配列> ::= 変数名 ( <式> )
                      変数の値 + 2 * 式の値 のアドレスの内容を値とする．
    <2バイト配列> ::= 変数名 : <式> )
                      変数の値 + 式の値 のアドレスの内容を値とする．
    <定数> ::= <10進定数> | <16進定数> | <文字定数>
    <変数> ::= <変数名> | <1バイト配列> | <2バイト配列>
    <式> ::= <項> | <項> <二項演算子> <項>
    <項> ::= <定数> | <変数> | <配列> |（ <式> ）| <単項演算子> <項>
    <二項演算子> ::= + | - | * | / | = | <> | < | > | <= | >=
                    比較演算 は 真:1, 偽:0の値を取る．
    <単項演算子> ::= - | + | % | ' | #
                     + は絶対値, % は直前に実行した除算の余り,
                     ' は乱数, #は否定．
    <行> ::= <行番号> スペース <文> [ 空白 <文> ] 改行
             | <行番号> スペース以外の文字 コメント 改行
    <文>
        <変数>=<項>     変数への代入
        #=<項>            <項>の値の行番号の文にジャンプ(GOTO)
                          行番号がなければ行番号より大きい最初の行へジャンプ
        #=-1              プログラムの終了(END)
        !=<項>            <項>の値の行番号のサブルーチンへジャンプ(GOSUB)
        ]                 サブルーチンから戻る(RETURN)
        ;=式              式の値が真の場合は次の文に進み，
                          偽の場合は次の行を実行．
        @                 DO
        @=(式)            UNTIL
        変数=初期値,ステップ FOR
        @=式              NEXT
        /                 改行出力
        "文字列"          文字列出力
        ?=<項>            <項>の結果を数値出力 左詰め
        ??=<項>           <項>の結果を数値出力 16進4桁
        ?$=<項>           <項>の結果の下位1バイトを数値出力 16進2桁
        ?(n)=<項>         <項>の値の数値出力 n桁で右詰め
        $=<項>            <項>の値の下位バイトを文字コードとする１文字を出力
        .=<項>            <項>の値の下位バイトの数だけ空白を出力
        '=<項>            <項>の値で乱数シードを設定
        <変数>=?          10進数値を入力して変数に代入
        <変数>=$          1文字を入力して変数に代入

ただし、

        #=<式>            <式>の値以上の行番号の行へジャンプ(GOTO)
        !=<式>            <式>の値以上の行番号の行へサブルーチン・コール(GOSUB)

        ?=<式>            <式>の結果を左詰め10進数で表示
        ??=<式>           <式>の結果を16進4桁で表示
        ?$=<式>           <式>の結果の最下位バイトを16進2桁で表示
        ?(<式1>)=<式2>    <式1>の値の桁数で、<式2>の値を右詰め10進数表示
        $=<式>            <式>の値の最下位バイトを文字コードとする１文字を表示
        .=<式>            <式>の値の数だけ空白を表示
        '=<式>            乱数の種(シード)を<式>の値として設定

